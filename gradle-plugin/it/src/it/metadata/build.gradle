/*
 * Copyright (c) 2019 Red Hat, Inc.
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at:
 *
 *     https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Red Hat, Inc. - initial API and implementation
 */
plugins {
    id 'org.eclipse.jkube.kubernetes' version "${jKubeVersion}"
    id 'org.eclipse.jkube.openshift' version "${jKubeVersion}"
    id 'java'
}

group = 'org.eclipse.jkube.integration.tests.gradle'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

Properties allAnnotations = new Properties();
allAnnotations.put("keyinall", "valueinall");
allAnnotations.put("multiline/config", "proxyMetadata:\n ISTIO_META_DNS_CAPTURE: \"false\"\nholdUntilProxyStarts: true");

kubernetes {
    offline = true
    images {
        image {
            name = 'repository/metadata:latest'
            build {
                from = 'quay.io/jkube/jkube-java-11'
                ports = ['8080']
            }
        }
    }
    resources {
        labels {
            all {
                keyinall = 'valueinall'
            }
            pod {
                keyinpodtemplate = 'valueinpodtemplate'
            }
            replicaSet {
                keyinreplicaset = 'valueinreplicaset'
            }
            service {
                keyinservice = 'valueinservice'
            }
            ingress {
                keyiningress = 'valueiningress'
            }
            deployment {
                keyindeployment = 'valueindeployment'
            }
            serviceAccount {
                keyinserviceaccount = 'valueinserviceaccount'
            }
        }
        annotations {
            all = allAnnotations
            pod {
                keyinpodtemplate = 'valueinpodtemplate'
            }
            replicaSet {
                keyinreplicaset = 'valueinreplicaset'
            }
            service {
                keyinservice = 'valueinservice'
            }
            ingress {
                keyiningress = 'valueiningress'
            }
            deployment {
                keyindeployment = 'valueindeployment'
            }
            serviceAccount {
                keyinserviceaccount = 'valueinserviceaccount'
            }
        }
        serviceAccounts = [{
            name = "test-serviceaccount"
        }]
    }
}

openshift {
    offline = true
    images {
        image {
            name = 'repository/metadata:latest'
            build {
                from = 'quay.io/jkube/jkube-java-11'
                ports = ['8080']
            }
        }
    }
    resources {
        labels {
            all {
                keyinall = 'valueinall'
            }
            pod {
                keyinpodtemplate = 'valueinpodtemplate'
            }
            replicaSet {
                keyinreplicaset = 'valueinreplicaset'
            }
            service {
                keyinservice = 'valueinservice'
            }
            ingress {
                keyiningress = 'valueiningress'
            }
            deployment {
                keyindeployment = 'valueindeployment'
            }
            serviceAccount {
                keyinserviceaccount = 'valueinserviceaccount'
            }
            route {
                keyinroute = 'valueinroute'
            }
        }
        annotations {
            all = allAnnotations
            pod {
                keyinpodtemplate = 'valueinpodtemplate'
            }
            replicaSet {
                keyinreplicaset = 'valueinreplicaset'
            }
            service {
                keyinservice = 'valueinservice'
            }
            ingress {
                keyiningress = 'valueiningress'
            }
            deployment {
                keyindeployment = 'valueindeployment'
            }
            serviceAccount {
                keyinserviceaccount = 'valueinserviceaccount'
            }
            route {
                keyinroute = 'valueinroute'
            }
        }
        serviceAccounts = [{
            name = "test-serviceaccount"
        }]
    }
}