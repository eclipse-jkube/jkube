<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2019 Red Hat, Inc.
    This program and the accompanying materials are made
    available under the terms of the Eclipse Public License 2.0
    which is available at:

        https://www.eclipse.org/legal/epl-2.0/

    SPDX-License-Identifier: EPL-2.0

    Contributors:
      Red Hat, Inc. - initial API and implementation

-->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.eclipse.jkube.quickstarts.maven</groupId>
        <artifactId>javaee8-webprofile-liberty</artifactId>
        <version>1.0.0-rc-1</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>javaee8-webprofile-liberty-app-it</artifactId>
    <version>1.0.0-rc-1</version>
    <name>Eclipse JKube :: Quickstarts :: Maven :: JavaEE 8 WebProfile :: IT</name>
    <packaging>jar</packaging>

    <properties>
        <applicationArtifactId>javaee8-webprofile-liberty-app</applicationArtifactId>
        <testProxyHost>localhost</testProxyHost> <!-- if VirtualBox is used, specify the host as a system property: -DtestProxyHost=192.168.99.100 -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>javaee8-webprofile-liberty-app</artifactId>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>integration-tests</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>integration-test</phase>
                                <id>integration-test</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <appserver.test.host>${testProxyHost}</appserver.test.host>
                                        <appserver.test.port>${testProxyHttpPort}</appserver.test.port>
                                        <application.context.root>${applicationContext}</application.context.root>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <summaryFile>${project.build.directory}/test-reports/it/failsafe-summary.xml</summaryFile>
                            <reportsDirectory>${project.build.directory}/test-reports/it</reportsDirectory>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>kubernetes-maven-plugin</artifactId>
                        <version>${project.version}</version>
                        <configuration>
                            <namespace>${docker.user}</namespace>
                            <images>
                                <image>
                                    <name>${docker.user}/${applicationArtifactId}:${project.version}</name>
                                    <watch>
                                        <interval>5000</interval>
                                    </watch>
                                </image>
                            </images>
                            <enricher>
                                <config>
                                    <!--
                                        expose the service externally by Kubernetes
                                    -->
                                    <jkube-service>
                                        <type>NodePort</type>
                                        <name>${applicationArtifactId}</name>
                                        <port>${testServerHttpPort}:${testServerHttpPort}</port> <!-- if the port was unset, the expose would be ignored -->
                                    </jkube-service>
                                </config>
                            </enricher>
                        </configuration>
                        <executions>
                            <execution>
                                <id>build-images</id>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>integration-test</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>apply</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>post-integration-test</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>undeploy</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- how to get the dynamic bound nodePort for the container in the kubernetes cluster
                             idea: https://stackoverflow.com/questions/13887436/maven-exec-bash-script-and-save-output-as-property
                             kubectl must be declared in $PATH
                        -->
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>integration-test-get-proxy-port</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <properties>
                                        <script>kubectl get service ${applicationArtifactId} -n ${docker.user} -o jsonpath="{.spec.ports[0].nodePort}"</script>
                                        <logScript>kubectl logs -l app=${project.artifactId} -n ${docker.user}</logScript>
                                    </properties>
                                    <source>
                                        def command = properties.script
                                        def process = command.execute()
                                        def outputStream = new StringBuffer()
                                        process.waitForProcessOutput(outputStream, System.err)
                                        def port = outputStream.toString().replace("\"", "").trim()
                                        println "testProxyHttpPort = " + port
                                        project.properties.testProxyHttpPort = port
                                        def logCommand = properties.logScript
                                        def times = 0;
                                        while (times++ &lt; 60) {
                                            def logProcess = logCommand.execute()
                                            def logOutput = new StringBuffer()
                                            logProcess.waitForProcessOutput(logOutput, System.err)
                                            if (logOutput.contains('server is ready to run a smarter planet')) {
                                                println 'Server was started'
                                                 break
                                            }
                                            Thread.sleep(1000)
                                        }
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
