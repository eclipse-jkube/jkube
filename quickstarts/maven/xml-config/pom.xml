<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2019 Red Hat, Inc.
    This program and the accompanying materials are made
    available under the terms of the Eclipse Public License 2.0
    which is available at:

        https://www.eclipse.org/legal/epl-2.0/

    SPDX-License-Identifier: EPL-2.0

    Contributors:
      Red Hat, Inc. - initial API and implementation

-->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.eclipse.jkube.quickstarts.maven</groupId>
  <artifactId>xml-config</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <name>Eclipse JKube :: Quickstarts :: Maven :: XML configuration</name>
  <packaging>jar</packaging>

  <properties>

    <!-- User part of the docker image to create. If you want to push the image
         to a registry use a registry user here for which you have karma -->
    <image.user>jkube</image.user>

    <!-- Versions -->
    <camel.version>2.16.2</camel.version>
    <weld.version>2.3.3.Final</weld.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-parent</artifactId>
        <version>${camel.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- == .:.:. Camel .:.:. == -->

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cdi</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <!-- == .:.:. CDI .:.:. == -->
    <dependency>
      <groupId>org.jboss.weld.se</groupId>
      <artifactId>weld-se</artifactId>
      <version>${weld.version}</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.weld</groupId>
      <artifactId>weld-core</artifactId>
      <version>${weld.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.deltaspike.cdictrl</groupId>
      <artifactId>deltaspike-cdictrl-weld</artifactId>
      <version>1.5.1</version>
    </dependency>

    <!-- == .:.:. Logging .:.:. == -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.18.1</version>
        <inherited>true</inherited>
        <configuration>
          <excludes>
            <exclude>**/*KT.java</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>org.apache.camel.cdi.Main</mainClass>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>new</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eclipse.jkube</groupId>
            <artifactId>kubernetes-maven-plugin</artifactId>
            <version>${project.version}</version>

            <configuration>
              <!-- Standard d-m-p configuration which defines how images are build, i.e. how the docker.tar is created -->
              <images>
                <image>
                  <name>${image.user}/${project.artifactId}:${project.version}</name>
                  <!-- "alias" is used to correlate to the containers in the pod spec -->
                  <alias>camel-service</alias>
                  <build>
                    <from>fabric8/java</from>
                    <assembly>
                      <targetDir>/deployments</targetDir>
                      <descriptorRef>artifact-with-dependencies</descriptorRef>
                    </assembly>
                    <env>
                      <JAVA_LIB_DIR>/deployments</JAVA_LIB_DIR>
                      <JAVA_MAIN_CLASS>org.apache.camel.cdi.Main</JAVA_MAIN_CLASS>
                    </env>
                  </build>
                </image>
              </images>
              <!-- resources to be created -->
              <resources>
                <!-- Labels that are applied to all created objects -->
                <labels>
                  <group>quickstarts</group>
                </labels>
                <!-- Definition of the ReplicationController / ReplicaSet. Any better name than "containers" ? -->
                <deployment>
                  <!-- Name of the replication controller, which will have a sane default (container alisa, mvn coords, ..) -->
                  <name>${project.artifactId}</name>
                  <!-- Replica count-->
                  <replicas>1</replicas>
                  <!-- Container to include in the POD template. By default all with a "build" section in the
                       "images" configuration will be add to the POD. However, they can be configured separately, too.
                      -->
                  <containers>
                    <container>
                      <!-- Alias name correlating with the same named "image" configuration above. Can be ommitted
                           if there is only a single image added -->
                      <alias>camel-service</alias>
                      <ports>
                        <!-- Ports to expose in the pod specs -->
                        <port>8778</port>
                      </ports>
                      <mounts>
                        <scratch>/var/scratch</scratch>
                      </mounts>
                    </container>
                  </containers>
                  <!-- Volumes used in the replicaSet -->
                  <volumes>
                  </volumes>
                </deployment>
                <!-- Dedicated section for (multiple) services to define -->
                <services>
                  <service>
                    <name>${project.artifactId}</name>
                    <headless>true</headless>
                  </service>
                </services>
              </resources>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>external</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.eclipse.jkube</groupId>
            <artifactId>kubernetes-maven-plugin</artifactId>
            <version>${project.version}</version>

            <configuration>
              <images>
                <image>
                  <name>${image.user}/${project.artifactId}:${project.version}</name>
                  <alias>camel-service</alias>
                  <build>
                    <from>fabric8/s2i-java@sha256:a6ba8a6e76ebd75f99f2431fe0ec39a82985bc21c0f9bd56021deca1ffde520c
                    </from>
                    <assembly>
                      <targetDir>/deployments</targetDir>
                      <descriptorRef>artifact-with-dependencies</descriptorRef>
                    </assembly>
                    <env>
                      <JAVA_LIB_DIR>/deployments</JAVA_LIB_DIR>
                      <JAVA_MAIN_CLASS>org.apache.camel.cdi.Main</JAVA_MAIN_CLASS>
                    </env>
                  </build>
                </image>
              </images>
              <resources>
                <volumes>
                  <volume>
                    <name>downward-api-volume</name>
                    <type>downwardAPI</type>
                    <items>
                      <item>
                        <path>labels</path>
                        <fieldRef>
                          <fieldPath>metadata.labels</fieldPath>
                        </fieldRef>
                      </item>
                      <item>
                        <path>annotations</path>
                        <fieldRef>
                          <fieldPath>metadata.annotations</fieldPath>
                        </fieldRef>
                      </item>
                    </items>
                  </volume>
                  <volume>
                    <name>config-vol</name>
                    <type>configMap</type> <!-- You must create a configmap before you can use it. -->
                    <configMapName>log-config</configMapName>
                    <configMapItems>
                      <configMapItem>
                        <key>log_level</key>
                        <path>log_level</path>
                      </configMapItem>
                    </configMapItems>
                  </volume>
                  <volume>
                    <name>scratch</name>
                    <type>emptyDir</type>
                    <medium>Memory</medium>
                  </volume>
                </volumes>
              </resources>
            </configuration>

            <executions>
              <execution>
                <goals>
                  <goal>resource</goal>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>
</project>
