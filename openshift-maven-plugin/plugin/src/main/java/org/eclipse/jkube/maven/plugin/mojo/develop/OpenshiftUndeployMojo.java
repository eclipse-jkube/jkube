/**
 * Copyright (c) 2019 Red Hat, Inc.
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at:
 *
 *     https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Red Hat, Inc. - initial API and implementation
 */
package org.eclipse.jkube.maven.plugin.mojo.develop;

import io.fabric8.kubernetes.api.model.HasMetadata;
import io.fabric8.kubernetes.client.KubernetesClient;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.eclipse.jkube.kit.enricher.api.util.KubernetesResourceUtil;
import org.eclipse.jkube.maven.plugin.mojo.OpenShift;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.eclipse.jkube.kit.config.service.kubernetes.KubernetesClientUtil.deleteOpenShiftEntities;

/**
 * Undeploys (deletes) the kubernetes resources generated by the current project.
 * <br>
 * This goal is the opposite to the <code>oc:run</code> or <code>oc:deploy</code> goals.
 */
@Mojo(name = "undeploy", requiresDependencyResolution = ResolutionScope.COMPILE, defaultPhase = LifecyclePhase.INSTALL)
public class OpenshiftUndeployMojo extends UndeployMojo {

    /**
     * The S2I binary builder BuildConfig name suffix appended to the image name to avoid
     * clashing with the underlying BuildConfig for the Jenkins pipeline
     */
    @Parameter(property = "jkube.s2i.buildNameSuffix", defaultValue = "-s2i")
    protected String s2iBuildNameSuffix;

    /**
     * The generated openshift YAML file
     */
    @Parameter(property = "jkube.openshiftManifest", defaultValue = DEFAULT_OPENSHIFT_MANIFEST)
    private File openshiftManifest;

    @Parameter(property = "jkube.openshiftImageStreamManifest", defaultValue = "${basedir}/target/${project.artifactId}-is.yml")
    private File openshiftImageStreamManifest;

    @Override
    protected void applyEntities(KubernetesClient kubernetes, String namespace, String fileName, Set<HasMetadata> entities) throws Exception {
        super.applyEntities(kubernetes, namespace, fileName, entities);
        final Set<HasMetadata> openShiftEntities = Stream.concat(entities.stream(), getImageStreamManifest().stream())
            .collect(Collectors.toSet());
        deleteOpenShiftEntities(kubernetes, namespace, openShiftEntities, s2iBuildNameSuffix, log);
    }

    @Override
    public File getManifest(KubernetesClient kubernetesClient) {
        return OpenShift.getOpenShiftManifest(kubernetesClient, getKubernetesManifest(), openshiftManifest);
    }

    @Override
    protected String getLogPrefix() {
        return OpenShift.DEFAULT_LOG_PREFIX;
    }

    /**
     * Loads the ImageStream manifest that was possibly created during the oc:build phase or an empty
     * Set if it doesn't exist.
     * @return the ImageStream manifest set.
     */
    private Set<HasMetadata> getImageStreamManifest() {
        return Optional.ofNullable(openshiftImageStreamManifest)
            .filter(File::exists)
            .filter(File::isFile)
            .map(manifest -> {
                try {
                    return KubernetesResourceUtil.loadResources(manifest);
                } catch (IOException e) {
                    log.warn("Unable to load ImageStream manifest '%s'", manifest);
                }
                return null;
            })
            .orElse(Collections.emptySet());
    }
}
