<!--

    Copyright (c) 2019 Red Hat, Inc.
    This program and the accompanying materials are made
    available under the terms of the Eclipse Public License 2.0
    which is available at:

        https://www.eclipse.org/legal/epl-2.0/

    SPDX-License-Identifier: EPL-2.0

    Contributors:
      Red Hat, Inc. - initial API and implementation

-->
<component-set>
  <components>
    <!-- Lifecycle for a build + integration test -->
    <component>
      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
      <role-hint>docker</role-hint>
      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>
      <configuration>
        <lifecycles>
          <lifecycle>
            <id>default</id>
            <!--
            phase mappings extend from jar mappings
            http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Default_Lifecycle_Bindings_-_Packaging_ejb__ejb3__jar__par__rar__war
            -->
            <phases>
              <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>
              <compile>org.apache.maven.plugins:maven-compiler-plugin:compile</compile>
              <process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources</process-test-resources>
              <test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile</test-compile>
              <test>org.apache.maven.plugins:maven-surefire-plugin:test</test>
              <package>org.apache.maven.plugins:maven-jar-plugin:jar,${project.groupId}:${project.artifactId}:build</package>
              <pre-integration-test>${project.groupId}:${project.artifactId}:start</pre-integration-test>
              <integration-test>org.apache.maven.plugins:maven-failsafe-plugin:integration-test</integration-test>
              <verify>${project.groupId}:${project.artifactId}:stop,org.apache.maven.plugins:maven-failsafe-plugin:verify</verify>
              <deploy>${project.groupId}:${project.artifactId}:push</deploy>
            </phases>
          </lifecycle>
        </lifecycles>
      </configuration>
    </component>
    <!-- Lifecycle for a pure docker Build build -->
    <component>
      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
      <role-hint>docker-build</role-hint>
      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>
      <configuration>
        <lifecycles>
          <lifecycle>
            <id>default</id>
            <phases>
              <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>
              <compile>org.apache.maven.plugins:maven-compiler-plugin:compile</compile>
              <process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources</process-test-resources>
              <test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile</test-compile>
              <test>org.apache.maven.plugins:maven-surefire-plugin:test</test>
              <package>org.apache.maven.plugins:maven-jar-plugin:jar,${project.groupId}:${project.artifactId}:build</package>
              <deploy>${project.groupId}:${project.artifactId}:push</deploy>
            </phases>
          </lifecycle>
        </lifecycles>
      </configuration>
    </component>
    <component>
      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
      <role-hint>docker-tar</role-hint>
      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>
      <configuration>
        <lifecycles>
          <lifecycle>
            <id>default</id>
            <phases>
              <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources>
              <compile>org.apache.maven.plugins:maven-compiler-plugin:compile</compile>
              <process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources</process-test-resources>
              <test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile</test-compile>
              <test>org.apache.maven.plugins:maven-surefire-plugin:test</test>
              <package>org.apache.maven.plugins:maven-jar-plugin:jar,${project.groupId}:${project.artifactId}:source</package>
              <install>org.apache.maven.plugins:maven-install-plugin:install</install>
            </phases>
          </lifecycle>
        </lifecycles>
      </configuration>
    </component>

    <!-- Components typically detected by annotations, but moved here because of
         https://github.com/codehaus-plexus/plexus-containers/issues/4 -->
    <component>
      <role>org.eclipse.jkube.kit.build.service.docker.config.handler.compose.DockerComposeConfigHandler</role>
      <implementation>org.eclipse.jkube.kit.build.service.docker.config.handler.compose.DockerComposeConfigHandler</implementation>
      <requirements>
        <requirement>
          <role>org.apache.maven.shared.filtering.MavenReaderFilter</role>
          <field-name>readerFilter</field-name>
        </requirement>
      </requirements>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.eclipse.jkube.kit.build.service.docker.config.handler.property.PropertyConfigHandler</role>
      <implementation>org.eclipse.jkube.kit.build.service.docker.config.handler.property.PropertyConfigHandler</implementation>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.eclipse.jkube.kit.build.service.docker.ServiceHubFactory</role>
      <implementation>org.eclipse.jkube.kit.build.service.docker.ServiceHubFactory</implementation>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.codehaus.plexus.archiver.Archiver</role>
      <role-hint>track</role-hint>
      <implementation>org.eclipse.jkube.kit.build.core.assembly.MappingTrackArchiver</implementation>
      <instantiation-strategy>singleton</instantiation-strategy>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.eclipse.jkube.kit.build.api.assembly.AssemblyManager</role>
      <implementation>org.eclipse.jkube.kit.build.api.assembly.AssemblyManager</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.archiver.Archiver</role>
          <role-hint>track</role-hint>
          <field-name>trackArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.assembly.archive.AssemblyArchiver</role>
          <field-name>assemblyArchiver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugins.assembly.io.AssemblyReader</role>
          <field-name>assemblyReader</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.archiver.manager.ArchiverManager</role>
          <field-name>archiverManager</field-name>
        </requirement>
      </requirements>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.eclipse.jkube.kit.build.service.docker.DockerAccessFactory</role>
      <implementation>org.eclipse.jkube.kit.build.service.docker.DockerAccessFactory</implementation>
      <isolated-realm>false</isolated-realm>
    </component>
    <component>
      <role>org.eclipse.jkube.kit.build.service.docker.config.handler.ImageConfigResolver</role>
      <implementation>org.eclipse.jkube.kit.build.service.docker.config.handler.ImageConfigResolver</implementation>
      <isolated-realm>false</isolated-realm>
    </component>
  </components>
</component-set>
